---
components:
  examples:
    400CreationExample:
      value:
        code: MGD-SERV-API-103
        href: "/api/managed-services-api/v1/errors/103"
        id: '103'
        kind: Error
        operation_id: 1iWIimqGcrDuL61aUxIZqBTqNRa
        reason: Synchronous action is not supported, use async=true parameter
    400InvalidQueryExample:
      value:
        code: MGD-SERV-API-23
        href: "/api/managed-services-api/v1/errors/23"
        id: '203'
        kind: Error
        operation_id: 1lWDGuybIrEnxrAem724gqkkiDv
        reason: 'Failed to parse search query: Unable to list kafka requests for api_kafka_service:
          MGD-SERV-API-23: Failed to parse search query: Unsupported column name for
          search: ''id''. Supported column names are: region, name, cloud_provider,
          name, status. Query invalid: id = 123'
    401Example:
      value:
        code: MGD-SERV-API-11
        href: "/api/managed-services-api/v1/errors/11"
        id: '11'
        kind: Error
        operation_id: 1iY3UhEhwmXBpWPfI2lNekpd4ZD
        reason: 'Unable to verify JWT token: Required authorization token not found'
    403Example:
      value:
        code: MGD-SERV-API-4
        href: "/api/managed-services-api/v1/errors/4"
        id: '4'
        kind: Error
        operation_id: 1lY3UiEhznXBpWPfI2lNejpd4YC
        reason: User 'foo-bar' is not authorized to access the service.
    403MaxAllowedInstanceReachedExample:
      value:
        code: MGD-SERV-API-5
        href: "/api/managed-services-api/v1/errors/5"
        id: '5'
        kind: Error
        operation_id: 1lY3UiEkxnXBpVPeI2oNejd3XB
        reason: User 'foo-bar' has reached a maximum number of 6 allowed instances.
    404DeleteExample:
      value:
        code: MGD-SERV-API-7
        href: "/api/managed-services-api/v1/errors/7"
        id: '7'
        kind: Error
        operation_id: 1iYO7g2g6HTdUKUa2ksH82kQD3y
        reason: KafkaResource with id='1iK3duVYIvv5YvLlyz1mGR3JyqN' not found
    404Example:
      value:
        code: MGD-SERV-API-7
        href: "/api/managed-services-api/v1/errors/7"
        id: '404'
        kind: Error
        reason: The requested resource doesn't exist
    500DeleteExample:
      value:
        code: MGD-SERV-API-9
        href: "/api/managed-services-api/v1/errors/9"
        id: '9'
        kind: Error
        operation_id: 1iYTsWry6nsqb2sNmFj5bXpD7Ca
        reason: 'error deleting syncset: OCM-EX-9: failed to delete syncset: ext-serviceapi-1ix03lndlmq0qfc7sita5sljv8e
          for cluster id: 1g5d88q0lrcdv4g7alb7slfgnj3dhbsj%!(EXTRA *errors.Error=identifier
          is ''404'', code is ''CLUSTERS-MGMT-404'' and operation identifier is ''1g5or50viu07oealuehrkc26dgftj1ac'':
          Cluster ''1g5d88q0lrcdv4g7alb7slfgnj3dhbsj'' not found)'
    500Example:
      value:
        code: MGD-SERV-API-9
        href: "/api/managed-services-api/v1/errors/9"
        id: '9'
        kind: Error
        operation_id: 1ieELvF9jMQY6YghfM9gGRsHvEW
        reason: Unspecified error
    CloudProviderExample:
      value:
        display_name: Amazon Web Services
        enabled: true
        id: aws
        kind: CloudProvider
        name: aws
    CloudRegionExample:
      value:
        display_name: US East, N. Virginia
        enabled: true
        id: us-east-1
        kind: CloudRegion
    EURegionExample:
      value:
        cloud_provider: aws
        name: serviceapitest
        region: eu-west-1
    KafkaRequestExample:
      value:
        bootstrapServerHost: serviceapi-1isy6rq3jki8q0otmjqfd3ocfrg.apps.ms-bttg0jn170hp.x5u8.s1.devshift.org
        cloud_provider: aws
        created_at: '2020-10-05T12:51:24.053142Z'
        href: "/api/managed-services-api/v1/kafkas/1iSY6RQ3JKI8Q0OTmjQFd3ocFRg"
        id: 1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        kind: kafka
        multi_az: true
        name: serviceapi
        owner: api_kafka_service
        region: us-east-1
        status: ready
        updated_at: '2020-10-05T12:56:36.362208Z'
    KafkaRequestFailedCreationStatusExample:
      value:
        bootstrapServerHost: serviceapi-1isy6rq3jki8q0otmjqfd3ocfrg.apps.ms-bttg0jn170hp.x5u8.s1.devshift.org
        cloud_provider: aws
        created_at: '2020-10-05T12:51:24.053142Z'
        failed_reason: a reason the kafka request creation failed
        href: "/api/managed-services-api/v1/kafkas/1iSY6RQ3JKI8Q0OTmjQFd3ocFRg"
        id: 1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        kind: kafka
        multi_az: true
        name: serviceapi
        owner: api_kafka_service
        region: us-east-1
        status: failed
        updated_at: '2020-10-05T12:56:36.362208Z'
    ServiceAccountExample:
      value:
        clientID: SA-121212
        clientSecret: secret
        description: service account for my app
        href: "/api/managed-services-api/v1/serviceaccounts/1"
        id: '1'
        kind: ServiceAccount
        name: my-app-sa
    ServiceAccountListItemExample:
      value:
        clientID: SA-121212
        description: service account for my app
        href: "/api/managed-services-api/v1/serviceaccounts/1"
        id: '1'
        kind: ServiceAccountListItem
        name: my-app-sa
    ServiceAccountRequestExample:
      value:
        description: service account for my app
        name: my-app-sa
    USRegionExample:
      value:
        cloud_provider: aws
        name: serviceapitest
        region: us-east-1
  parameters:
    id:
      description: The id of record
      in: path
      name: id
      required: true
      schema:
        type: string
    orderBy:
      description: |-
        Specifies the order by criteria. The syntax of this parameter is
        similar to the syntax of the _order by_ clause of an SQL statement.
        Each query can be ordered by any of the kafkaRequests fields.
        For example, in order to retrieve all kafkas ordered by their name:

        ```sql
        name asc
        ```

        Or in order to retrieve all kafkas ordered by their name _and_ created date:

        ```sql
        name asc, created_at asc
        ```

        If the parameter isn't provided, or if the value is empty, then
        the results will be ordered by name.
      examples:
        orderBy:
          value: name asc
      explode: true
      in: query
      name: orderBy
      required: false
      schema:
        type: string
      style: form
    page:
      description: Page index
      examples:
        page:
          value: '1'
      in: query
      name: page
      required: false
      schema:
        type: string
    search:
      description: |
        Search criteria.

        The syntax of this parameter is similar to the syntax of the _where_ clause of an
        SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are `<>`, `=` or `LIKE`.
        Allowed joins are `AND` and `OR`, however there is a limit of max 10 joins in the search query.

        Examples:

        To retrieve kafka request with name equal `my-kafka` and region equal `aws`, the value should be:

        ```
        name = my-kafka and cloud_provider = aws
        ```

        To retrieve kafka request with its name starting with `my`, the value should be:

        ```
        name like my%25
        ```

        If the parameter isn't provided, or if the value is empty, then all the kafkas
        that the user has permission to see will be returned.

        Note. If the query is invalid, an error will be returned
      examples:
        search:
          value: name = my-kafka and cloud_provider = aws
      explode: true
      in: query
      name: search
      required: false
      schema:
        type: string
      style: form
    size:
      description: Number of items in each page
      examples:
        size:
          value: '100'
      in: query
      name: size
      required: false
      schema:
        type: string
  schemas:
    CloudProvider:
      description: Cloud provider.
      properties:
        display_name:
          description: Name of the cloud provider for display purposes.
          type: string
        enabled:
          description: Whether the cloud provider is enabled for deploying an OSD
            cluster.
          type: boolean
        id:
          description: Unique identifier of the object.
          type: string
        kind:
          description: Indicates the type of this object. Will be 'CloudProvider'
            link.
          type: string
        name:
          description: Human friendly identifier of the cloud provider, for example
            `aws`.
          type: string
      required:
      - enabled
    CloudProviderList:
      allOf:
      - "$ref": "#/components/schemas/List"
      - example:
          item:
            "$ref": "#/components/examples/CloudProviderExample"
          kind: CloudProviderList
          page: '1'
          size: '1'
          total: '1'
        properties:
          items:
            items:
              allOf:
              - "$ref": "#/components/schemas/CloudProvider"
            type: array
        type: object
    CloudRegion:
      description: Description of a region of a cloud provider.
      properties:
        display_name:
          description: Name of the region for display purposes, for example `N. Virginia`.
          type: string
        enabled:
          default: false
          description: Whether the region is enabled for deploying an OSD cluster.
          type: boolean
        id:
          description: Unique identifier of the object.
          type: string
        kind:
          description: Indicates the type of this object. Will be 'CloudRegion'.
          type: string
      required:
      - enabled
    CloudRegionList:
      allOf:
      - "$ref": "#/components/schemas/List"
      - example:
          item:
            "$ref": "#/components/examples/CloudRegionExample"
          kind: CloudRegionList
          page: '1'
          size: '1'
          total: '1'
        properties:
          items:
            items:
              allOf:
              - "$ref": "#/components/schemas/CloudRegion"
            type: array
        type: object
    Error:
      allOf:
      - "$ref": "#/components/schemas/ObjectReference"
      - properties:
          code:
            type: string
          operation_id:
            type: string
          reason:
            type: string
        type: object
    ErrorList:
      allOf:
      - "$ref": "#/components/schemas/List"
      - properties:
          items:
            items:
              "$ref": "#/components/schemas/Error"
            type: array
        type: object
    KafkaRequest:
      allOf:
      - "$ref": "#/components/schemas/ObjectReference"
      - example:
          "$ref": "#/components/examples/KafkaRequestExample"
        properties:
          bootstrapServerHost:
            type: string
          cloud_provider:
            type: string
          created_at:
            format: date-time
            type: string
          failed_reason:
            type: string
          multi_az:
            type: boolean
          name:
            type: string
          owner:
            type: string
          region:
            type: string
          status:
            type: string
          updated_at:
            format: date-time
            type: string
        type: object
    KafkaRequestList:
      allOf:
      - "$ref": "#/components/schemas/List"
      - example:
          item:
            "$ref": "#/components/examples/KafkaRequestExample"
          kind: KafkaRequestList
          page: '1'
          size: '1'
          total: '1'
        properties:
          items:
            items:
              allOf:
              - "$ref": "#/components/schemas/KafkaRequest"
            type: array
        type: object
    KafkaRequestPayload:
      description: Schema for the request body sent to /kafkas POST
      properties:
        cloud_provider:
          description: The cloud provider where the Kafka cluster will be created
            in
          type: string
        multi_az:
          description: Set this to true to configure the Kafka cluster to be multiAZ
          type: boolean
        name:
          description: The name of the Kafka cluster. It must consist of lower-case
            alphanumeric characters or '-', start with an alphabetic character, and
            end with an alphanumeric character, and can not be longer than 32 characters.
          type: string
        region:
          description: The region where the Kafka cluster will be created in
          type: string
      required:
      - name
      type: object
    List:
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
      required:
      - kind
      - page
      - size
      - total
      - items
      type: object
    ObjectReference:
      properties:
        href:
          type: string
        id:
          type: string
        kind:
          type: string
      type: object
    ServiceAccount:
      allOf:
      - "$ref": "#/components/schemas/ObjectReference"
      - example:
          "$ref": "#/components/examples/ServiceAccountExample"
        properties:
          clientID:
            type: string
          clientSecret:
            type: string
          description:
            description: ''
            type: string
          id:
            description: server generated unique id of the service account
            type: string
          name:
            description: ''
            type: string
        type: object
      description: Service Account created in MAS-SSO for the Kafka Cluster for authentication
    ServiceAccountList:
      allOf:
      - example:
          items:
            "$ref": "#/components/examples/ServiceAccountListItemExample"
          kind: ServiceAccountList
        properties:
          items:
            items:
              allOf:
              - "$ref": "#/components/schemas/ServiceAccountListItem"
            type: array
          kind:
            type: string
        type: object
    ServiceAccountListItem:
      allOf:
      - "$ref": "#/components/schemas/ObjectReference"
      - properties:
          clientID:
            description: ''
            type: string
          description:
            description: ''
          id:
            description: server generated unique id of the service account
            type: string
          name:
            description: ''
            type: string
        type: object
      description: ''
    ServiceAccountRequest:
      description: Schema for the request to create a service account
      example:
        "$ref": "#/components/examples/ServiceAccountRequestExample"
      properties:
        description:
          description: A description for the service account
          type: string
        name:
          description: The name of the service account
          type: string
      required:
      - name
      type: object
  securitySchemes:
    Bearer:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  description: Managed Service API
  title: Managed Service API
  version: 0.0.1
openapi: 3.0.0
paths:
  "/api/managed-services-api/v1/cloud_providers":
    get:
      operationId: listCloudProviders
      parameters:
      - "$ref": "#/components/parameters/page"
      - "$ref": "#/components/parameters/size"
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CloudProviderList"
          description: Retrieved list of supported cloud providers
        '401':
          content:
            application/json:
              examples:
                401Example:
                  "$ref": "#/components/examples/401Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Auth token is invalid
        '500':
          content:
            application/json:
              examples:
                500Example:
                  "$ref": "#/components/examples/500Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Retrieves the list of supported cloud providers.
  "/api/managed-services-api/v1/cloud_providers/{id}/regions":
    get:
      operationId: listCloudProviderRegions
      parameters:
      - "$ref": "#/components/parameters/id"
      - "$ref": "#/components/parameters/page"
      - "$ref": "#/components/parameters/size"
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CloudRegionList"
          description: Retrieved list of supported cloud providers regions
        '401':
          content:
            application/json:
              examples:
                401Example:
                  "$ref": "#/components/examples/401Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Auth token is invalid
        '500':
          content:
            application/json:
              examples:
                500Example:
                  "$ref": "#/components/examples/500Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Retrieves the list of supported regions of the supported cloud provider.
  "/api/managed-services-api/v1/kafkas":
    get:
      operationId: listKafkas
      parameters:
      - "$ref": "#/components/parameters/page"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/orderBy"
      - "$ref": "#/components/parameters/search"
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/KafkaRequestList"
          description: A list of Kafka requests
        '400':
          content:
            application/json:
              examples:
                InvalidQueryExample:
                  "$ref": "#/components/examples/400InvalidQueryExample"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Bad request
        '401':
          content:
            application/json:
              examples:
                401Example:
                  "$ref": "#/components/examples/401Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Auth token is invalid
        '403':
          content:
            application/json:
              examples:
                403Example:
                  "$ref": "#/components/examples/403Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: User not authorized to access the service.
        '500':
          content:
            application/json:
              examples:
                500Example:
                  "$ref": "#/components/examples/500Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of Kafka requests
    post:
      operationId: createKafka
      parameters:
      - description: Perform the action in an asynchronous manner
        in: query
        name: async
        required: true
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            examples:
              EURegion:
                "$ref": "#/components/examples/EURegionExample"
              USRegion:
                "$ref": "#/components/examples/USRegionExample"
            schema:
              "$ref": "#/components/schemas/KafkaRequestPayload"
        description: Kafka data
        required: true
      responses:
        '202':
          content:
            application/json:
              examples:
                KafkaRequestPostResponseExample:
                  "$ref": "#/components/examples/KafkaRequestExample"
              schema:
                "$ref": "#/components/schemas/KafkaRequest"
          description: Accepted
        '400':
          content:
            application/json:
              examples:
                400CreationExample:
                  "$ref": "#/components/examples/400CreationExample"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Validation errors occurred
        '401':
          content:
            application/json:
              examples:
                401Example:
                  "$ref": "#/components/examples/401Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Auth token is invalid
        '403':
          content:
            application/json:
              examples:
                403Example:
                  "$ref": "#/components/examples/403Example"
                403MaxAllowedInstanceReachedExample:
                  "$ref": "#/components/examples/403MaxAllowedInstanceReachedExample"
              schema:
                "$ref": "#/components/schemas/Error"
          description: User forbidden either because the user is not authorized to
            access the service or because the maximum number of instances that can
            be created by this user has been reached.
        '404':
          content:
            application/json:
              examples:
                404Example:
                  "$ref": "#/components/examples/404Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: The requested resource doesn't exist
        '500':
          content:
            application/json:
              examples:
                500Example:
                  "$ref": "#/components/examples/500Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: An unexpected error occurred creating the Kafka Request
      security:
      - Bearer: []
      summary: Create a new kafka Request
  "/api/managed-services-api/v1/kafkas/{id}":
    delete:
      operationId: deleteKafkaById
      responses:
        '204':
          content:
            application/json:
              example:
              schema:
                "$ref": "#/components/schemas/Error"
          description: Deleted
        '401':
          content:
            application/json:
              examples:
                401Example:
                  "$ref": "#/components/examples/401Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Auth token is invalid
        '403':
          content:
            application/json:
              examples:
                403Example:
                  "$ref": "#/components/examples/403Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: User not authorized to access the service.
        '404':
          content:
            application/json:
              examples:
                404DeleteExample:
                  "$ref": "#/components/examples/404DeleteExample"
              schema:
                "$ref": "#/components/schemas/Error"
          description: No kafka request with specified id exists
        '500':
          content:
            application/json:
              examples:
                500DeleteExample:
                  "$ref": "#/components/examples/500DeleteExample"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Delete a kafka request by id
    get:
      operationId: getKafkaById
      responses:
        '200':
          content:
            application/json:
              examples:
                KafkaRequestGetResponseExample:
                  "$ref": "#/components/examples/KafkaRequestExample"
                KafkaRequestGetResponseWithFailedCreationStatusExample:
                  "$ref": "#/components/examples/KafkaRequestFailedCreationStatusExample"
              schema:
                "$ref": "#/components/schemas/KafkaRequest"
          description: Kafka request found by id
        '401':
          content:
            application/json:
              examples:
                401Example:
                  "$ref": "#/components/examples/401Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Auth token is invalid
        '403':
          content:
            application/json:
              examples:
                403Example:
                  "$ref": "#/components/examples/403Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: User not authorized to access the service.
        '404':
          content:
            application/json:
              examples:
                404Example:
                  "$ref": "#/components/examples/404Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: No kafka request with specified id exists
        '500':
          content:
            application/json:
              examples:
                500Example:
                  "$ref": "#/components/examples/500Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a kafka request by id
    parameters:
    - "$ref": "#/components/parameters/id"
  "/api/managed-services-api/v1/serviceaccounts":
    get:
      operationId: listServiceAccounts
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ServiceAccountList"
          description: List of service accounts
        '401':
          content:
            application/json:
              examples:
                401Example:
                  "$ref": "#/components/examples/401Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Auth token is invalid
        '403':
          content:
            application/json:
              examples:
                403Example:
                  "$ref": "#/components/examples/403Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: User not authorized to access the service
        '500':
          content:
            application/json:
              examples:
                500Example:
                  "$ref": "#/components/examples/500Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: List service accounts
    post:
      operationId: createServiceAccount
      requestBody:
        content:
          application/json:
            examples:
              sa:
                "$ref": "#/components/examples/ServiceAccountRequestExample"
            schema:
              "$ref": "#/components/schemas/ServiceAccountRequest"
        description: service account request
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                serviceaccount:
                  "$ref": "#/components/examples/ServiceAccountExample"
              schema:
                "$ref": "#/components/schemas/ServiceAccount"
          description: service account created
        '401':
          content:
            application/json:
              examples:
                401Example:
                  "$ref": "#/components/examples/401Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Auth token is invalid
        '403':
          content:
            application/json:
              examples:
                403Example:
                  "$ref": "#/components/examples/403Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: list of service account
        '500':
          content:
            application/json:
              examples:
                500Example:
                  "$ref": "#/components/examples/500Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Create a service account
  "/api/managed-services-api/v1/serviceaccounts/{id}":
    delete:
      operationId: deleteServiceAccount
      parameters:
      - "$ref": "#/components/parameters/id"
      responses:
        '204':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: deleted
        '401':
          content:
            application/json:
              examples:
                401Example:
                  "$ref": "#/components/examples/401Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: auth token is invalid
        '403':
          content:
            application/json:
              examples:
                401Example:
                  "$ref": "#/components/examples/403Example"
              schema:
                "$ref": "#/components/schemas/Error"
          description: User not authorized to access the service
        '500':
          content:
            application/json:
              examples:
                500Example:
                  "$ref": "#/components/examples/500Example"
              schema: {}
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Delete service account
    description: Delete the service account with the given id
    summary: Delete a service account
  "/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials":
    post:
      operationId: resetServiceAccountCreds
      parameters:
      - "$ref": "#/components/parameters/id"
      responses:
        '200':
          content:
            application/json:
              examples:
                sa-reset:
                  "$ref": "#/components/examples/ServiceAccountExample"
              schema:
                "$ref": "#/components/schemas/ServiceAccount"
          description: reset credentials
      security:
      - Bearer: []
      summary: reset credentials for the service account
servers:
- description: Main (production) server
  url: https://api.openshift.com
- description: Staging server
  url: https://api.stage.openshift.com
- description: localhost
  url: http://localhost:8000
- description: current domain
  url: "/"
